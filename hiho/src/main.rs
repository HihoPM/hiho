mod error;
mod password;
mod storage;

use crate::error::PasswordError;
use crate::password::PasswordValidator;
use crate::storage::PasswordStorage;
use std::io;

fn main() -> Result<(), PasswordError> {
    println!("üîí –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π v0.1");

    loop {
        println!("\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):");
        let mut input = String::new();
        io::stdin().read_line(&mut input)?;
        let input = input.trim();

        if input.eq_ignore_ascii_case("exit") {
            break;
        }

        match PasswordValidator::validate(input) {
            Ok(_) => {
                PasswordStorage::save(input, "passwords.txt")?;
                println!("‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {}/3", 
                    PasswordValidator::strength(input));
            },
            Err(e) => eprintln!("‚ùå –û—à–∏–±–∫–∞: {}", e),
        }
    }

    Ok(())
}