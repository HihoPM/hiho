mod error;
mod password;
mod storage;
mod crypto;

use crate::crypto::Crypto;
use crate::error::PasswordError;
use crate::password::PasswordValidator;
use crate::storage::PasswordStorage;
use std::io;

fn main() -> Result<(), PasswordError> {
    println!("üîí –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π v0.1");

    let crypto = Crypto::new();
    println!("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {}", crypto.get_key_hex());
    println!("IV: {}", crypto.get_iv_hex());

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –∫—Ä–∏–ø—Ç–æ—Å–∏—Å—Ç–µ–º–æ–π
    let storage = PasswordStorage::new(crypto);

        loop {
        println!("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
        println!("1. –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å");
        println!("2. –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏");
        println!("3. –í—ã—Ö–æ–¥");
        
        let mut choice = String::new();
        io::stdin().read_line(&mut choice)?;
        
        match choice.trim() {
            "1" => {
                println!("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:");
                let mut password = String::new();
                io::stdin().read_line(&mut password)?;
                let password = password.trim();
                
                match PasswordValidator::validate(password) {
                    Ok(_) => {
                        storage.save(password, "passwords.enc")?;
                        println!("‚úÖ –ü–∞—Ä–æ–ª—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
                    },
                    Err(e) => eprintln!("‚ùå –û—à–∏–±–∫–∞: {}", e),
                }
            },
            "2" => {
                match storage.load("passwords.enc") {
                    Ok(passwords) => {
                        println!("üîê –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏:");
                        for (i, pass) in passwords.iter().enumerate() {
                            println!("{}. {}", i+1, pass);
                        }
                    },
                    Err(e) => eprintln!("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {}", e),
                }
            },
            "3" => break,
            _ => println!("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"),
        }
    }

    Ok(())
}